struct VS_OUTPUT
{
	float4 Position : POSITION0;
	float2 TexCoord : TEXCOORD0;
	float4 Colour	: COLOR0;
	float4 gl_FragCoord : TEXCOORD1;
};

static const float M_PI = 3.1415926535897932384626433832795f;
static const float fade = 5.0f;

texture tex;
sampler2D s = sampler_state {
	texture = <tex>;
};

float p; // percent 0-1 total effect done
float tint_p; // percent till full tint
float4 tint;
int sprite_w;
int sprite_h;
int draw_x;
int draw_y;
int screen_offset_x;
int screen_offset_y;
int screen_w;
int screen_h;
float scale;

// Calculated gl_FragCoord equivalent from Input.gl_FragCoord (from the default vertex shader)
// NOTE: invert_y=true makes this exactly the same as OpenGL, otherwise y is 0-(h-1) from top to bottom
float4 get_gl_FragCoord(float4 input/*, bool invert_y*/)
{
	float4 gl_FragCoord = input / input.w;
	gl_FragCoord.x = floor((gl_FragCoord.x + 1.0f) / 2.0f * screen_w);
	gl_FragCoord.y = floor((1.0f - gl_FragCoord.y) / 2.0f * screen_h);
	/*
	if (invert_y) {
		gl_FragCoord.y = screen_h - gl_FragCoord.y;
	}
	*/
	return gl_FragCoord;
}

float4 main(VS_OUTPUT Input) : COLOR0
{
	float4 result = tex2D(s, Input.TexCoord) * Input.Colour;
	float shade = (result.r + result.g + result.b) / 3.0f;
	float p2 = min(1.0f, p / tint_p);
	float p3 = 1.0f - p2;

	float4 gl_FragCoord = get_gl_FragCoord(Input.gl_FragCoord/*, false*/); // save on instructions by commenting this out

	float add_x = floor(p * sprite_h); // gives it some movement horizontally
	float pix_x =  floor((gl_FragCoord.x - screen_offset_x) / scale) - draw_x + add_x;
	float pix_y =  floor((gl_FragCoord.y - screen_offset_y) / scale) - draw_y;

	float wave = sin((pix_x/sprite_w)*M_PI*10.0f/* 2*5 */);
	float end_y = floor(p * (sprite_h+fade));
	end_y += wave;
	float step = end_y - pix_y;

	result = float4(
		p3 * result.r + p2 * shade * tint.r,
		p3 * result.g + p2 * shade * tint.g,
		p3 * result.b + p2 * shade * tint.b,
		result.a
	);

	float4 pix_grey = float4(shade, shade, shade, shade) * (1.0f - (p*p)) * result.a;

	float alpha_result;
	float alpha_grey;

	if (step >= 1.0f) {
		if ((step-fade) >= 1.0f) {
			alpha_result = 0.0f;
			alpha_grey = 1.0f;
		}
		else {
			if (fmod(pix_x, step) >= 1.0f) {
				alpha_result = 0.0f;
				alpha_grey = 1.0f;
			}
			else {
				alpha_result = (fade - (step-1.0f)) / fade * 0.8f + 0.2f;
				alpha_grey = 1.0f - alpha_result;
			}
		}
	}
	else {
		alpha_result = 1.0f;
		alpha_grey = 0.0f;
	}

	return result * alpha_result + pix_grey * alpha_grey;
}
